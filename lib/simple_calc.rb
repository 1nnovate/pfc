#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "simple_calc.y".
#

require 'racc/parser.rb'

# $Id: calc.y,v 1.4 2005/11/20 13:29:32 aamine Exp $
class SimpleCalc < Racc::Parser

module_eval(<<'...end simple_calc.y/module_eval...', 'simple_calc.y', 28)

  def parse(str)
    @q = []
    until str.empty?
      case str
      when /\A\s+/
      when /\A\d+(\.\d+)?/
        @q.push [:NUMBER, $&.to_f]
      when /\A.|\n/o
        s = $&
        @q.push [s, s]
      end
      str = $'
    end
    @q.push [false, '$end']
    do_parse
  end

  def next_token
    @q.shift
  end

...end simple_calc.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     8,     9,    10,    11,    12,    20,     3,     4,     7,     5,
     6,     3,     4,    14,     5,     6,     3,     4,    15,     5,
     6,     3,     4,   nil,     5,     6,     3,     4,   nil,     5,
     6,     3,     4,   nil,     5,     6,     8,     9,    10,    11,
     8,     9,     8,     9 ]

racc_action_check = [
    13,    13,    13,    13,     3,    13,    10,    10,     1,    10,
    10,    11,    11,     6,    11,    11,     0,     0,     7,     0,
     0,     4,     4,   nil,     4,     4,     9,     9,   nil,     9,
     9,     8,     8,   nil,     8,     8,     2,     2,     2,     2,
    18,    18,    19,    19 ]

racc_action_pointer = [
    10,     8,    33,    -5,    15,   nil,     4,    18,    25,    20,
     0,     5,   nil,    -3,   nil,   nil,   nil,   nil,    37,    39,
   nil ]

racc_action_default = [
    -2,   -11,    -1,   -11,   -11,   -10,   -11,   -11,   -11,   -11,
   -11,   -11,    -8,   -11,    -9,    21,    -5,    -6,    -3,    -4,
    -7 ]

racc_goto_table = [
     2,     1,   nil,   nil,    13,   nil,   nil,   nil,    16,    17,
    18,    19 ]

racc_goto_check = [
     2,     1,   nil,   nil,     2,   nil,   nil,   nil,     2,     2,
     2,     2 ]

racc_goto_pointer = [
   nil,     1,     0 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 12, :_reduce_none,
  0, 12, :_reduce_2,
  3, 13, :_reduce_3,
  3, 13, :_reduce_4,
  3, 13, :_reduce_5,
  3, 13, :_reduce_6,
  3, 13, :_reduce_7,
  2, 13, :_reduce_8,
  2, 13, :_reduce_9,
  1, 13, :_reduce_none ]

racc_reduce_n = 11

racc_shift_n = 21

racc_token_table = {
  false => 0,
  :error => 1,
  :UMINUS => 2,
  "*" => 3,
  "/" => 4,
  "+" => 5,
  "-" => 6,
  "(" => 7,
  ")" => 8,
  :NUMBER => 9,
  "." => 10 }

racc_nt_base = 11

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UMINUS",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"(\"",
  "\")\"",
  "NUMBER",
  "\".\"",
  "$start",
  "target",
  "exp" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'simple_calc.y', 12)
  def _reduce_2(val, _values, result)
     result = 0
    result
  end
.,.,

module_eval(<<'.,.,', 'simple_calc.y', 14)
  def _reduce_3(val, _values, result)
     result += val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'simple_calc.y', 15)
  def _reduce_4(val, _values, result)
     result -= val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'simple_calc.y', 16)
  def _reduce_5(val, _values, result)
     result *= val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'simple_calc.y', 17)
  def _reduce_6(val, _values, result)
     result /= val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'simple_calc.y', 18)
  def _reduce_7(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'simple_calc.y', 19)
  def _reduce_8(val, _values, result)
     result = -val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'simple_calc.y', 20)
  def _reduce_9(val, _values, result)
     result = "0.#{val[1]}".to_f
    result
  end
.,.,

# reduce 10 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class SimpleCalc


if $0 == __FILE__
  parser = SimpleCalc.new
  puts
  puts 'type "Q" to quit.'
  puts
  while true
    puts
    print '? '
    str = gets.chop!
    break if /q/i =~ str
    begin
      puts "= #{parser.parse(str)}"
    rescue ParseError
      puts $!
    end
  end
end
